

zad 4
val a =List (-2, -1, 0, 1, 2)
val List (_, _, x, _, _) = a

val b = List((1,2),(0,1))
val List((_,_),(x,_)) = b


zad 3
/*
let rec root3 (a, e)=
	match (a>1.) with
	| true -> cus(a, a/.3., e)
	| false ->cus(a, a, e);;
*/
def root(a:Double, e:Double):Double = 
  a>1 match
    {
    case (true) => rootPom(a, a/3, e)
    case (false) =>rootPom(a, a, e)
    }
   val x =2+3
 
/*
let rec root3pom (a, x, e) = 
  if (abs_float((x**3.)-.a)<=e*.abs_float(a)) then x 
	else root3pom (a, x+.((a/.(x**2.))-.x)/.3., e);;
	*/
	
	def rootPom(a:Double, x:Double, e:Double):Double=
	  ((Math.pow(x,3)-a).abs<=e*((a).abs)) match
	  {
	  case (true) =>x
	  case (false) => rootPom (a, (x+(a/(x*x)-x)/3, e)
	  }
root(1000, Math.pow(10, -3))