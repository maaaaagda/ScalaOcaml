let f x y = y (x y);

let f2 x y = function z -> x::y;;
let f2 x y = function z -> (x::y);;
let f2 x y = (function z -> x)::y;;
let f2 x y = function k ->(function z -> x::y);; (y)

let f2 x y z = z x::y;; === let f2 x y z = (z x)::y;; tak ida nawiaski

let f2 x y z = z (x::y);;
let f3 x  = function c ->x;;
let rec f4 x =f4 x;
let  f5 x =f5 x;

zad 2
let rec g x = g x;
let rec g1 x = x;
function x->x;;




type 'param para_i_x = int * 'param;;
type para_i_f = float para_i_x;;
let (x:para_i_f) = (3,3.14);;
let (x) = (3,3.14);;

//sumy roz³¹czne 
type kolor = Trefl | Karo | Kier | Pik;;
type karta = Blotka of kolor*int | Walet of kolor
| Dama of kolor | Krol of kolor | As of kolor;;
let x2 = Krol Trefl;;
let (x3:karta) = Blotka (Karo, 6) ;;

let rec przedzial a b = if a>b then []
else b::(przedzial a (b-1));;

let wszystkieKarty kol =
let figury = [As kol; Krol kol; Dama kol; Walet kol]
and blotki = List.map (function n -> Blotka(kol,n))
(przedzial 2 10)
in figury @ blotki;;

let kiery = wszystkieKarty Kier;;

//lista heterogeniczna
type ('a,'b) ab = A of 'a | B of 'b;;
let ls = ["Ala "; "ma "; "kota"] and lint = [1;2;3];;
let lsint = (List.map (function x -> A x) ls) @ (List.map (function x -> B x) lint);;


let rec concat_and_add l =
match l with
[] -> ("",0)
| h::t -> match (h, concat_and_add t) with
(A str, (s,n)) -> (str^s, n)
| (B num, (s,n)) -> (s, num+n);;

concat_and_add lsint;;

//drzewa binarne
type 'a bt = Empty | Node of 'a * 'a bt * 'a bt;;

let t = Node(1,Node(2,Empty,Node(3,Empty,Empty)),Empty);;

let rec nodes = function
Empty -> 0
| Node(_,t1,t2) -> 1 + nodes t1 + nodes t2;;

nodes t;;
